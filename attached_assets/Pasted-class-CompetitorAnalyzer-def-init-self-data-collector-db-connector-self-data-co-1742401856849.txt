class CompetitorAnalyzer:
    def __init__(self, data_collector, db_connector):
        self.data_collector = data_collector
        self.db = db_connector
        
    async def analyze_competitors(self, keyword):
        """키워드 관련 경쟁 판매자 분석"""
        # 데이터 수집
        raw_data = await self.data_collector.collect_all_data(keyword)
        crawl_data = raw_data.get('crawl_data', {})
        
        # 검색 결과에서 판매자 정보 추출
        shopping_results = crawl_data.get('shopping_results', {})
        products = shopping_results.get('products', [])
        
        # 판매자별 상품 수 분석
        seller_products = {}
        for product in products:
            mall = product.get('mall', '')
            if mall:
                if mall not in seller_products:
                    seller_products[mall] = []
                seller_products[mall].append(product)
        
        # 판매자별 분석 결과
        competitor_analysis = []
        for seller, products in seller_products.items():
            # 판매자 상세 정보 수집
            seller_info = await self._get_seller_info(seller)
            
            # 가격 전략 분석
            price_strategy = self._analyze_price_strategy(products)
            
            # 제품 포지셔닝 분석
            positioning = self._analyze_product_positioning(products)
            
            # 리뷰 분석
            review_analysis = self._analyze_reviews(products)
            
            competitor_analysis.append({
                'seller': seller,
                'seller_info': seller_info,
                'product_count': len(products),
                'price_strategy': price_strategy,
                'positioning': positioning,
                'review_analysis': review_analysis
            })
        
        # 경쟁사 순위 (상품 수 기준)
        competitor_analysis.sort(key=lambda x: x['product_count'], reverse=True)
        
        # 시장 점유율 계산
        total_products = sum(len(products) for products in seller_products.values())
        for competitor in competitor_analysis:
            competitor['market_share'] = round((competitor['product_count'] / total_products) * 100, 2)
        
        return {
            'keyword': keyword,
            'total_competitors': len(competitor_analysis),
            'top_competitors': competitor_analysis[:10],  # 상위 10개만 반환
            'market_concentration': self._calculate_market_concentration(competitor_analysis)
        }
    
    async def _get_seller_info(self, seller_name):
        """판매자 상세 정보 수집"""
        # 데이터베이스에서 판매자 정보 조회
        seller_info = await self.db.get_seller_info(seller_name)
        
        # 정보가 없으면 크롤링으로 수집
        if not seller_info:
            seller_info = await self._crawl_seller_info(seller_name)
            # 수집한 정보 저장
            await self.db.save_seller_info(seller_name, seller_info)
        
        return seller_info
    
    async def _crawl_seller_info(self, seller_name):
        """판매자 정보 크롤링"""
        # 네이버 스토어팜 또는 스마트스토어 페이지 크롤링
        # 초기 기본 정보
        return {
            'name': seller_name,
            'type': self._estimate_seller_type(seller_name),
            'estimated_size': 'unknown'
        }
    
    def _estimate_seller_type(self, seller_name):
        """판매자 유형 추정 (브랜드/일반 판매자/대형몰)"""
        # 알려진 대형 쇼핑몰 리스트
        large_malls = ['11번가', 'G마켓', '옥션', '인터파크', '롯데온', 'SSG닷컴', '쿠팡']
        if seller_name in large_malls:
            return 'large_mall'
            
        # 알려진 브랜드 리스트 (DB에서 관리)
        # 여기서는 간단히 구현
        if seller_name.endswith('공식스토어') or '브랜드' in seller_name:
            return 'brand'
            
        return 'individual'
    
    def _analyze_price_strategy(self, products):
        """판매자의 가격 전략 분석"""
        if not products:
            return {'strategy': 'unknown', 'avg_price': 0}
            
        # 상품 가격 추출
        prices = [p.get('price', 0) for p in products]
        
        if not prices:
            return {'strategy': 'unknown', 'avg_price': 0}
            
        avg_price = sum(prices) / len(prices)
        
        # 가격 분포 계산
        min_price = min(prices)
        max_price = max(prices)
        price_range = max_price - min_price
        
        # 가격 전략 분석
        if price_range / avg_price < 0.1:  # 가격 변동이 10% 미만
            strategy = 'fixed_price'
        elif min_price < 0.8 * avg_price:  # 최저가가 평균의 80% 미만
            strategy = 'low_price_entry'
        elif max_price > 1.5 * avg_price:  # 최고가가 평균의 150% 초과
            strategy = 'premium_segment'
        else:
            strategy = 'moderate_range'
            
        return {
            'strategy': strategy,
            'avg_price': round(avg_price, 2),
            'min_price': min_price,
            'max_price': max_price,
            'price_range': price_range
        }
    
    def _analyze_product_positioning(self, products):
        """판매자의 제품 포지셔닝 분석"""
        if not products:
            return {'positioning': 'unknown'}
            
        # 리뷰 수 기반 인기도 분석
        reviews = [p.get('reviews', 0) for p in products]
        avg_reviews = sum(reviews) / len(reviews) if reviews else 0
        
        # 가격 수준 분석
        prices = [p.get('price', 0) for p in products]
        avg_price = sum(prices) / len(prices) if prices else 0
        
        # 포지셔닝 결정
        if avg_price > 1.3 * self.db.get_category_avg_price():  # 카테고리 평균가 대비 30% 이상
            if avg_reviews > 1.5 * self.db.get_category_avg_reviews():  # 카테고리 평균 리뷰 대비 50% 이상
                positioning = 'premium_popular'
            else:
                positioning = 'premium_niche'
        else:
            if avg_reviews > 1.5 * self.db.get_category_avg_reviews():
                positioning = 'value_popular'
            else:
                positioning = 'value_niche'
                
        return {
            'positioning': positioning,
            'avg_reviews': round(avg_reviews, 2),
            'avg_price': round(avg_price, 2)
        }
    
    def _analyze_reviews(self, products):
        """상품 리뷰 분석"""
        if not products:
            return {'avg_reviews': 0, 'total_reviews': 0}
            
        # 리뷰 수집
        reviews = [p.get('reviews', 0) for p in products]
        
        if not reviews:
            return {'avg_reviews': 0, 'total_reviews': 0}
            
        total_reviews = sum(reviews)
        avg_reviews = total_reviews / len(reviews)
        
        return {
            'avg_reviews': round(avg_reviews, 2),
            'total_reviews': total_reviews,
            'review_distribution': self._calculate_review_distribution(reviews)
        }
    
    def _calculate_review_distribution(self, reviews):
        """리뷰 분포 계산"""
        if not reviews:
            return {}
            
        # 구간별 리뷰 수 분포
        distributions = {
            '0': 0,
            '1-10': 0,
            '11-50': 0,
            '51-100': 0,
            '101-500': 0,
            '501+': 0
        }
        
        for review_count in reviews:
            if review_count == 0:
                distributions['0'] += 1
            elif review_count <= 10:
                distributions['1-10'] += 1
            elif review_count <= 50:
                distributions['11-50'] += 1
            elif review_count <= 100:
                distributions['51-100'] += 1
            elif review_count <= 500:
                distributions['101-500'] += 1
            else:
                distributions['501+'] += 1
                
        # 백분율로 변환
        total = len(reviews)
        for key in distributions:
            distributions[key] = round((distributions[key] / total) * 100, 2)
            
        return distributions
    
    def _calculate_market_concentration(self, competitors):
        """시장 집중도 계산 (허핀달-허시만 지수)"""
        if not competitors:
            return 0
            
        # 시장 점유율의 제곱합
        hhi = sum((competitor['market_share'] / 100) ** 2 for competitor in competitors) * 10000
        
        return round(hhi, 2)