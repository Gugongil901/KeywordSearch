class KeywordMetricsCalculator:
    def __init__(self, data_collector, db_connector):
        self.data_collector = data_collector
        self.db = db_connector
        
    async def calculate_all_metrics(self, keyword):
        """키워드의 모든 핵심 지표를 계산"""
        # 데이터 수집
        raw_data = await self.data_collector.collect_all_data(keyword)
        
        # 기본 지표 계산
        basic_metrics = self._calculate_basic_metrics(keyword, raw_data)
        
        # 경쟁 지표 계산
        competition_metrics = self._calculate_competition_metrics(keyword, raw_data)
        
        # 성장성 지표 계산
        growth_metrics = await self._calculate_growth_metrics(keyword, raw_data)
        
        # 수익성 지표 계산
        profit_metrics = self._calculate_profit_metrics(keyword, raw_data)
        
        # 마케팅 효율 지표 계산
        marketing_metrics = self._calculate_marketing_metrics(keyword, raw_data)
        
        # 계절성 지표 계산
        seasonality_metrics = self._calculate_seasonality_metrics(keyword, raw_data)
        
        # 모든 지표 통합
        all_metrics = {
            'basic': basic_metrics,
            'competition': competition_metrics,
            'growth': growth_metrics,
            'profit': profit_metrics,
            'marketing': marketing_metrics,
            'seasonality': seasonality_metrics
        }
        
        # 종합 점수 계산
        all_metrics['overall_score'] = self._calculate_overall_score(all_metrics)
        
        # 결과 저장
        self.db.save_keyword_metrics(keyword, all_metrics)
        
        return all_metrics
    
    def _calculate_basic_metrics(self, keyword, raw_data):
        """기본 지표 계산 (검색량, 상품 수 등)"""
        api_data = raw_data.get('api_data', {})
        crawl_data = raw_data.get('crawl_data', {})
        
        # 쇼핑 데이터에서 검색량 추출
        shopping_data = api_data.get('shopping_data', {})
        search_volume = shopping_data.get('relKeyword', [{}])[0].get('monthlyPcQcCnt', 0)
        search_volume_mobile = shopping_data.get('relKeyword', [{}])[0].get('monthlyMobileQcCnt', 0)
        
        # 크롤링 데이터에서 상품 수, 가격 정보 추출
        shopping_results = crawl_data.get('shopping_results', {})
        total_products = shopping_results.get('total_products', 0)
        price_stats = shopping_results.get('price_stats', {})
        
        # 기본 지표 계산 결과
        return {
            'keyword': keyword,
            'search_volume': {
                'pc': search_volume,
                'mobile': search_volume_mobile,
                'total': search_volume + search_volume_mobile
            },
            'product_count': total_products,
            'price_stats': price_stats,
            'category': self._determine_category(keyword, raw_data)
        }
    
    def _calculate_competition_metrics(self, keyword, raw_data):
        """경쟁 지표 계산 (경쟁강도, 광고비율 등)"""
        api_data = raw_data.get('api_data', {})
        crawl_data = raw_data.get('crawl_data', {})
        
        # 광고 API 데이터
        ad_data = api_data.get('ad_data', {})
        bid_price = ad_data.get('bid', {}).get('bid', 0)  # 입찰가
        
        # 크롤링 데이터
        shopping_results = crawl_data.get('shopping_results', {})
        ad_ratio = shopping_results.get('ad_ratio', 0)  # 광고 비율
        mall_distribution = shopping_results.get('mall_distribution', {})
        
        # 상위 10개 상품 중 브랜드/일반 판매자 비율
        products = shopping_results.get('products', [])
        brand_count = sum(1 for p in products if self._is_brand_seller(p.get('mall', '')))
        brand_ratio = brand_count / len(products) if products else 0
        
        # 전체 상품 수 대비 리뷰 수 비율
        review_stats = shopping_results.get('review_stats', {})
        total_reviews = review_stats.get('total', 0)
        total_products = shopping_results.get('total_products', 1)  # 0으로 나누기 방지
        review_ratio = total_reviews / total_products
        
        # 경쟁도 점수 계산 (0-100, 높을수록 경쟁 심함)
        competition_score = self._calculate_competition_score(
            ad_ratio, brand_ratio, bid_price, total_products, review_ratio
        )
        
        # 시장 집중도 계산 (허핀달-허시만 지수 방식)
        hhi = self._calculate_market_concentration(mall_distribution)
        
        return {
            'keyword': keyword,
            'competition_score': competition_score,
            'ad_ratio': ad_ratio,
            'brand_ratio': brand_ratio,
            'bid_price': bid_price,
            'review_ratio': review_ratio,
            'market_concentration': hhi,
            'difficulty_level': self._get_difficulty_level(competition_score)
        }
    
    async def _calculate_growth_metrics(self, keyword, raw_data):
        """성장성 지표 계산 (검색량 추세, 예측 등)"""
        # 과거 데이터 조회 (최근 12개월)
        historical_data = await self.db.get_historical_data(keyword, months=12)
        
        # 검색량 성장률 계산
        search_volume_trend = self._calculate_search_volume_trend(historical_data)
        
        # 시계열 분석으로 향후 3개월 예측
        forecast_data = self._forecast_search_volume(historical_data, months_ahead=3)
        
        # 계절 조정 성장률 (계절 요인 제거)
        seasonally_adjusted_growth = self._calculate_seasonally_adjusted_growth(historical_data)
        
        # 카테고리 대비 상대적 성장률
        category = self._determine_category(keyword, raw_data)
        relative_growth = await self._calculate_relative_growth(keyword, category, historical_data)
        
        # 3개월/6개월/12개월 성장률
        growth_rates = {
            '3month': self._calculate_period_growth(historical_data, months=3),
            '6month': self._calculate_period_growth(historical_data, months=6),
            '12month': self._calculate_period_growth(historical_data, months=12)
        }
        
        # 성장 점수 계산 (0-100, 높을수록 성장성 높음)
        growth_score = self._calculate_growth_score(
            growth_rates, forecast_data, relative_growth
        )
        
        return {
            'keyword': keyword,
            'growth_score': growth_score,
            'growth_rates': growth_rates,
            'forecast': forecast_data,
            'relative_growth': relative_growth,
            'seasonally_adjusted_growth': seasonally_adjusted_growth,
            'trend_direction': self._get_trend_direction(growth_rates['3month'])
        }
    
    def _calculate_profit_metrics(self, keyword, raw_data):
        """수익성 지표 계산 (마진율, ROI 등)"""
        api_data = raw_data.get('api_data', {})
        crawl_data = raw_data.get('crawl_data', {})
        
        # 가격 정보 추출
        shopping_results = crawl_data.get('shopping_results', {})
        price_stats = shopping_results.get('price_stats', {})
        avg_price = price_stats.get('avg', 0)
        
        # 광고 비용 추정
        ad_data = api_data.get('ad_data', {})
        cpc = ad_data.get('bid', {}).get('bid', 0)  # 클릭당 비용
        
        # 카테고리별 평균 마진율 데이터 (미리 정의된 값 활용)
        category = self._determine_category(keyword, raw_data)
        avg_margin_rate = self._get_category_margin_rate(category)
        
        # 예상 마진 계산
        estimated_margin = avg_price * avg_margin_rate
        
        # CPC 대비 마진 비율 (= ROI)
        margin_to_cpc_ratio = estimated_margin / cpc if cpc > 0 else 0
        
        # 수익성 점수 계산 (0-100, 높을수록 수익성 높음)
        profit_score = self._calculate_profit_score(
            estimated_margin, margin_to_cpc_ratio, avg_price
        )
        
        return {
            'keyword': keyword,
            'profit_score': profit_score,
            'estimated_margin': estimated_margin,
            'margin_rate': avg_margin_rate,
            'margin_to_cpc_ratio': margin_to_cpc_ratio,
            'avg_price': avg_price,
            'profitability_level': self._get_profitability_level(profit_score)
        }
    
    def _calculate_marketing_metrics(self, keyword, raw_data):
        """마케팅 효율 지표 계산 (클릭률, 전환율 추정 등)"""
        api_data = raw_data.get('api_data', {})
        
        # 광고 API 데이터
        ad_data = api_data.get('ad_data', {})
        ad_metrics = ad_data.get('metrics', {})
        
        # 기본값 설정
        ctr = ad_metrics.get('ctr', 0.02)  # 클릭률 기본값 2%
        cvr = ad_metrics.get('cvr', 0.015)  # 전환률 기본값 1.5%
        
        # 검색량 데이터
        basic_metrics = self._calculate_basic_metrics(keyword, raw_data)
        search_volume = basic_metrics.get('search_volume', {}).get('total', 0)
        
        # 마케팅 관련 지표 계산
        estimated_clicks = search_volume * ctr
        estimated_conversions = estimated_clicks * cvr
        
        # 광고 효율 점수 계산
        marketing_efficiency_score = self._calculate_marketing_efficiency_score(
            ctr, cvr, search_volume
        )
        
        return {
            'keyword': keyword,
            'marketing_efficiency_score': marketing_efficiency_score,
            'estimated_ctr': ctr,
            'estimated_cvr': cvr,
            'estimated_clicks': estimated_clicks,
            'estimated_conversions': estimated_conversions,
            'efficiency_level': self._get_efficiency_level(marketing_efficiency_score)
        }
    
    def _calculate_seasonality_metrics(self, keyword, raw_data):
        """계절성 지표 계산 (계절 변동, 주기성 등)"""
        # 과거 24개월 데이터 조회
        historical_data = self.db.get_historical_data(keyword, months=24)
        
        # 시계열 분해로 계절성 파악
        seasonal_components = self._decompose_time_series(historical_data)
        
        # 계절성 강도 계산 (0-1, 높을수록 계절성 강함)
        seasonality_strength = self._calculate_seasonality_strength(seasonal_components)
        
        # 피크 월 식별
        peak_months = self._identify_peak_months(seasonal_components)
        
        # 계절성 점수 계산 (0-100)
        seasonality_score = seasonality_strength * 100
        
        return {
            'keyword': keyword,
            'seasonality_score': seasonality_score,
            'seasonality_strength': seasonality_strength,
            'peak_months': peak_months,
            'current_season_status': self._get_current_season_status(seasonal_components)
        }
    
    def _calculate_overall_score(self, all_metrics):
        """모든 지표를 종합한 총합 점수 계산"""
        # 각 카테고리별 점수
        basic_score = 0  # 기본 지표는 점수에 직접 반영하지 않음
        competition_score = all_metrics['competition'].get('competition_score', 0)
        growth_score = all_metrics['growth'].get('growth_score', 0)
        profit_score = all_metrics['profit'].get('profit_score', 0)
        marketing_score = all_metrics['marketing'].get('marketing_efficiency_score', 0)
        seasonality_score = all_metrics['seasonality'].get('seasonality_score', 0)
        
        # 경쟁도 점수는 역으로 계산 (낮을수록 좋음)
        competition_score_inverted = 100 - competition_score
        
        # 가중치 적용 (각 지표의 중요도에 따라 조정 가능)
        weights = {
            'competition': 0.3,
            'growth': 0.3,
            'profit': 0.2,
            'marketing': 0.15,
            'seasonality': 0.05
        }
        
        # 가중 평균 계산
        overall_score = (
            competition_score_inverted * weights['competition'] +
            growth_score * weights['growth'] +
            profit_score * weights['profit'] +
            marketing_score * weights['marketing'] +
            seasonality_score * weights['seasonality']
        )
        
        # 종합 등급 부여
        overall_grade = self._get_overall_grade(overall_score)
        
        return {
            'score': round(overall_score, 2),
            'grade': overall_grade,
            'category_scores': {
                'competition': competition_score,
                'growth': growth_score,
                'profit': profit_score,
                'marketing': marketing_score,
                'seasonality': seasonality_score
            }
        }
    
    # 유틸리티 메서드
    def _calculate_competition_score(self, ad_ratio, brand_ratio, bid_price, total_products, review_ratio):
        """경쟁도 점수 계산 (0-100)"""
        # 광고 비율 점수 (0-25)
        ad_score = min(25, ad_ratio * 100)
        
        # 브랜드 비율 점수 (0-25)
        brand_score = min(25, brand_ratio * 100)
        
        # 입찰가 점수 (0-25)
        max_bid = 10000  # 최대 입찰가 기준 (조정 가능)
        bid_score = min(25, (bid_price / max_bid) * 25)
        
        # 상품 수 점수 (0-15)
        product_score = min(15, (total_products / 10000) * 15)
        
        # 리뷰 비율 점수 (0-10)
        review_score = min(10, (review_ratio / 10) * 10)
        
        # 종합 점수
        return round(ad_score + brand_score + bid_score + product_score + review_score, 2)
    
    def _calculate_market_concentration(self, mall_distribution):
        """시장 집중도 계산 (허핀달-허시만 지수)"""
        total_products = sum(mall_distribution.values())
        
        if total_products == 0:
            return 0
            
        hhi = sum((count / total_products) ** 2 for count in mall_distribution.values()) * 10000
        return round(hhi, 2)
    
    def _calculate_search_volume_trend(self, historical_data):
        """검색량 추세 계산"""
        if not historical_data or len(historical_data) < 2:
            return {'slope': 0, 'trend': 'stable'}
            
        # 선형 회귀로 추세 계산
        x = list(range(len(historical_data)))
        y = [data['search_volume'] for data in historical_data]
        
        # NumPy 사용 시
        import numpy as np
        slope, intercept = np.polyfit(x, y, 1)
        
        # 추세 방향 결정
        if slope > 0.05 * np.mean(y):
            trend = 'rising'
        elif slope < -0.05 * np.mean(y):
            trend = 'falling'
        else:
            trend = 'stable'
            
        return {'slope': slope, 'trend': trend}
    
    def _forecast_search_volume(self, historical_data, months_ahead=3):
        """시계열 분석으로 검색량 예측"""
        if not historical_data or len(historical_data) < 6:
            return [{'month': i+1, 'forecast': 0, 'lower': 0, 'upper': 0} for i in range(months_ahead)]
            
        # Prophet 또는 ARIMA 모델 사용
        # 여기서는 간단한 이동 평균 방식으로 대체
        recent_volumes = [data['search_volume'] for data in historical_data[-6:]]
        avg_volume = sum(recent_volumes) / len(recent_volumes)
        
        # 성장률 기반으로 간단한 예측
        last_6_trend = (recent_volumes[-1] / recent_volumes[0]) - 1 if recent_volumes[0] > 0 else 0
        monthly_growth_rate = last_6_trend / 6
        
        forecasts = []
        for i in range(months_ahead):
            month_forecast = avg_volume * (1 + monthly_growth_rate * (i + 1))
            
            forecasts.append({
                'month': i + 1,
                'forecast': round(month_forecast, 2),
                'lower': round(month_forecast * 0.8, 2),  # 80% 신뢰구간 하한
                'upper': round(month_forecast * 1.2, 2)   # 80% 신뢰구간 상한
            })
            
        return forecasts
    
    def _calculate_seasonally_adjusted_growth(self, historical_data):
        """계절 요인을 제거한 성장률 계산"""
        if not historical_data or len(historical_data) < 12:
            return 0
            
        # 시계열 분해로 추세 요소만 추출
        # statsmodels 사용 시 더 정확한 계산 가능
        # 여기서는 간단한 방식으로 구현
        
        # 12개월 이동 평균으로 계절성 제거
        volumes = [data['search_volume'] for data in historical_data]
        
        if len(volumes) < 24:
            return self._calculate_period_growth(historical_data, months=min(6, len(historical_data)//2))
            
        # 12개월 이동 평균 계산
        ma_12 = []
        for i in range(12, len(volumes)):
            ma_12.append(sum(volumes[i-12:i]) / 12)
            
        # 첫 MA와 마지막 MA 사이의 성장률
        if len(ma_12) >= 2 and ma_12[0] > 0:
            growth_rate = (ma_12[-1] / ma_12[0]) - 1
            return round(growth_rate * 100, 2)
            
        return 0
    
    async def _calculate_relative_growth(self, keyword, category, historical_data):
        """카테고리 대비 상대적 성장률 계산"""
        if not historical_data or not category:
            return 0
            
        # 카테고리 전체의 평균 성장률 조회
        category_growth = await self.db.get_category_growth_rate(category)
        
        # 키워드의 성장률
        keyword_growth = self._calculate_period_growth(historical_data, months=3)
        
        # 상대적 성장률 (카테고리 평균과의 차이)
        if category_growth is not None:
            relative_growth = keyword_growth - category_growth
            return round(relative_growth, 2)
            
        return 0
    
    def _calculate_perio